name: Build and deploy ASP.Net Core app to an Azure Web App

env:
  #AZURE_WEBAPP_NAME: your-app-name    # set this to the name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: './webapp'      # set this to the path to your web app project
  DOTNET_VERSION: '7.0.x'                 # set this to the .NET Core version to use

on:
    workflow_run:
        types:
          - completed
        workflows:
          - "Terraform Apply"
        branches:
          - main
    push:
        branches:
          - main
        paths:
          - 'webapp/**'
    workflow_dispatch:

permissions:
    contents: read
    id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo
      - uses: actions/checkout@v3

      # Setup .NET Core SDK
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      
      # cache NuGet packages to speed up builds-> dotnet restore command
      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      # dotnet build command
      - name: Build with dotnet
        run: dotnet build --configuration Release
        working-directory: ./webapp
        # dotnet publish command-> publish the app to a folder
      - name: dotnet publish
        run: dotnet publish -c Release -o ./myapp
        working-directory: ./webapp
        # Upload the artifact to GitHub 
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: ./myapp

#deploy job
  deploy:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    # set dependency on build job
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    steps:
      # download the artifact from build job
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

          # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
# Download the file from Azure Blob Storage
      - name: Download from Azure Blob Storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob download --account-name ${{ secrets.STORAGE_ACCOUNT_NAME }} --account-key ${{ secrets.AZURE_STORAGE_ACCOUNT_KEY }} --name terraform_out.txt --file terraform_out.txt --container-name ${{ secrets.CONTAINER_NAME }} --overwrite           
# Load the file content into environment variables
      - name: Load file content into environment variable
        run: |
          while IFS= read -r line; do
            key=$(echo $line | cut -d = -f 1)
            value=$(echo $line | cut -d = -f 2-)
            echo "$key=$value" >> $GITHUB_ENV
          done < terraform_out.txt
# download publish profile from Azure Web App set it as variable for deployment
      - name: Download publish profile
        run: |
          az login --service-principal -u ${{ secrets.ARM_CLIENT_ID }} -p ${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.ARM_TENANT_ID }}
          az webapp deployment list-publishing-profiles --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query "[0].publishingPassword" -o tsv
          echo "AZURE_WEBAPP_PUBLISH_PROFILE=$PUBLISH_PROFILE" >> $GITHUB_ENV
# publish the app to Azure Web App
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ env.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./myapp
